#region d3dAddSphere
	/// @func  d3dAddSphere(vertex,x,y,z,radius,dirBase,dirTop,outside,steps,color,alpha,leftTexture,topTexture,rightTexture,botTexture)
	function d3dAddSphere(_vtx,_x,_y,_z,_rad,_dirBase,_dirTop,_out,_ste,_col,_alp,_leftt,_topt,_rightt,_bott) {
		// "steps" debe ser divisible de 90
		// Init.
		var _ini = 0,_fin = 360,_inc = 1;
		var _n = _out ? 1 : -1;
		if (!_out) {
			_ini = 360;
			_fin = 0;
			_inc = -1;
		}
		var _s = _ste;
		var _inc = _s*_inc;
		
		// Obtenemos la lista de vacuums con los que colisiona.
		// Para cada vacuum que colisiona añadimos su id y varios datos clave para cálculos futuros.
		var _arrVacuums = [];
		if (object_get_name(object_index) ==  "oVacuum")
			for (var i = 0; i < instance_number(oVacuum); ++i)
			{
				var _vac = instance_find(oVacuum,i);
				var _d = point_distance_3d(x, y, z, _vac.x, _vac.y, _vac.z);
				if (id != _vac.id and _d < radius+_vac.radius)
				{
					var S = (_d+radius+_vac.radius)/2;
					var _A = sqrt(S*(S-radius)*(S-_vac.radius)*(S-_d));
					var _radSec = 2*_A/_d;
					var _lonToSec = sqrt(sqr(radius)-sqr(_radSec));
					var _phiToSec = point_direction(x,y,_vac.x,_vac.y);
					var _thetaToSec = point_direction(0,z,point_distance(x,y,_vac.x,_vac.y),_vac.z);
					array_push(_arrVacuums,{
						id:_vac.id,
						lonToSec:_lonToSec,
						radSec:_radSec,
						phiToSec:_phiToSec,
						thetaToSec:_thetaToSec
					});
				}
			}
		
		// Añadimos los vértices teniendo en cuenta los vacuums.
		for (var i = _dirBase; i < _dirTop; i += _s) {
			for (var j = _ini; j != _fin; j += _inc) {
				var _itex0 = _leftt+(_rightt-_leftt)*j/360;
				var _itex1 = _leftt+(_rightt-_leftt)*(j+_inc)/360;
				var _jtex0 = _topt+(_bott-_topt)*(i+90+_s)/180;
				var _jtex1 = _topt+(_bott-_topt)*(i+90)/180;
				
				var _do = d3dAddVertexCalcSphere(_vtx,_x,_y,_z,_rad,j,i,_col,_alp,_itex0,_jtex1,_n,_arrVacuums,true);
				if (_do)
				{
					d3dAddVertexCalcSphere(_vtx,_x,_y,_z,_rad,j+_inc,i,_col,_alp,_itex1,_jtex1,_n,_arrVacuums,false);
					d3dAddVertexCalcSphere(_vtx,_x,_y,_z,_rad,j,i+_s,_col,_alp,_itex0,_jtex0,_n,_arrVacuums,false);
					d3dAddVertexCalcSphere(_vtx,_x,_y,_z,_rad,j,i+_s,_col,_alp,_itex0,_jtex0,_n,_arrVacuums,false);
					d3dAddVertexCalcSphere(_vtx,_x,_y,_z,_rad,j+_inc,i,_col,_alp,_itex1,_jtex1,_n,_arrVacuums,false);
					d3dAddVertexCalcSphere(_vtx,_x,_y,_z,_rad,j+_inc,i+_s,_col,_alp,_itex1,_jtex0,_n,_arrVacuums,false);
				}
			}
		}
	}
#endregion


#region d3dAddVertexCalcSphere
	/// @func  d3dAddVertexCalcSphere(vertex,xBase,yBase,zBase,lon,phi,theta,color,alpha,itexture,jtexture,n,arrVacuums,isFirst)
	function d3dAddVertexCalcSphere(_vtx,_xBase,_yBase,_zBase,_lon,_phi,_theta,_col,_alp,_i_tex,_j_tex,_n,_arrVacuums,_isFirst) {
		// Para el caso de muros desiguales...
		var _lonFinal = _lon, _colFinal = _col;
		if (object_get_name(object_index) == "oVacuum")
		{
			var _ang = power(_phi, abs(_theta))*sqrt(_phi)*abs(ln(power(_phi, abs(_theta))));
			if (_phi == 0 or _phi == 360) _ang = 0;
			_lonFinal *= 1 + 0.05*dcos(_ang);
			var _c = 205 + 50*dsin(_ang);
			_colFinal = make_color_rgb(_c,_c,_c);
		}
		
		// Calcula la posición del vértice.
		var _phiFinal = _phi;
		var _thetaFinal = _theta;
		var _x = _xBase+_lonFinal*dcos(_phiFinal)*dcos(_thetaFinal);
		var _y = _yBase-_lonFinal*dsin(_phiFinal)*dcos(_thetaFinal);
		var _z = _zBase+_lonFinal*dsin(_thetaFinal);
		
		// Comprueba si colisiona con algún otro vacuum de los vacuums colisionantes.
		var _isShown = true;
		for (var i = 0; i < array_length(_arrVacuums); ++i)
			if (point_distance_3d(
				x+radius*dcos(_phiFinal)*dcos(_thetaFinal),
				y-radius*dsin(_phiFinal)*dcos(_thetaFinal),
				z+radius*dsin(_thetaFinal),
				_arrVacuums[i].id.x, _arrVacuums[i].id.y, _arrVacuums[i].id.z) < _arrVacuums[i].id.radius
			)
			{
				// Primero tomamos el punto del vertex y lo desrotamos respecto a su vacuum para que lo tengamos mirando al 0,0.
				// Lo aplanamos respecto a su x, para obtenerlo contenido en el círculo secante y poder sacar su ángulo.
				var _coordLocal = matrix_transform_vertex(matrixBuildExt(0,0,0,0,-_arrVacuums[i].thetaToSec,-_arrVacuums[i].phiToSec,1,1,1),
					+dcos(_phi)*dcos(_theta), -dsin(_phi)*dcos(_theta), +dsin(_theta));
				if (_isFirst and point_distance(0,0,_coordLocal[1],_coordLocal[2]) < 0.5)
				{
					_isShown = false;
					break;
				}
				var _lambda = point_direction(0,0,_coordLocal[1],_coordLocal[2]);
				//_colFinal = make_color_hsv(_lambda*255/360,255,255);
				
				// Al colisionar con uno de los vacuums, reposiciona el vértice. No tenemos en cuenta que colisione con más de dos, evitamos que suceda.
				// Cogemos un punto apuntando a 0,0 desde el origen y rotado con distancia "h".
				// Este punto lo transformaremos para rotar en cono y luego otra para ponerlo "mirando a la otra esfera".
				var _coordVacuum = matrix_transform_vertex(matrixBuildExt(0,0,0,_lambda,_arrVacuums[i].thetaToSec,_arrVacuums[i].phiToSec,1,1,1),
					_arrVacuums[i].lonToSec/radius, _arrVacuums[i].radSec/radius, 0);
				
				_x = _coordVacuum[0];
				_y = _coordVacuum[1];
				_z = _coordVacuum[2];
				_phiFinal = point_direction(0,0,_x,_y);
				_thetaFinal = point_direction(0,0,point_distance(0,0,_x,_y),_z);
				break;
			}
		
		// Lo añade si aplica.
		if (_isShown) d3dAddVertex(_vtx,
			_x,_y,_z,
			_colFinal,_alp,_i_tex,_j_tex,
			+_n*dcos(_phiFinal)*dcos(_thetaFinal),
			-_n*dsin(_phiFinal)*dcos(_thetaFinal),
			+_n*dsin(_thetaFinal)
		);
		return _isShown;
	}
#endregion